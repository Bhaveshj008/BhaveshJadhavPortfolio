[
    {
      "id": 1,
      "slug": "personal-portfolio",
      "name": "Personal portfolio",
      "images": ["portfolio/img(1).jpg","portfolio/img(2).jpg","portfolio/img(3).jpg","portfolio/img(4).jpg","portfolio/img(5).jpg","portfolio/img(6).jpg","portfolio/img(7).jpg","portfolio/img(8).jpg","portfolio/img(9).jpg","portfolio/img(10).jpg","portfolio/img(11).jpg","portfolio/img(12).jpg","portfolio/img(13).jpg","portfolio/img(14).jpg"],
      "video": "https://www.youtube.com/embed/9NxJs9OlI8w?si=ng6ze6RUdllca8q-",
     "description": "## Project Documentation \n\n## Overview \nThis project is a personal portfolio website that showcases various projects and allows users to contact the owner via a contact form. It integrates with Bravo SMTP for email sending and fetches blog posts from Hashnode using their API. \n\n## Installation \nTo run the project locally, follow these steps: \n\n1. Clone the repository: \n   ```bash \n   git clone https://github.com/Bhaveshj008/BhaveshJadhavPortfolio \n \n   ``` \n\n2. Install dependencies: \n   ```bash \n   npm install \n   ``` \n\n3. Set up environment variables: \n   - Create a `.env` file in the root directory. \n   - Define the following variables: \n     ``` \n     BRAVO_SMTP_HOST=<your_bravo_smtp_host> \n     BRAVO_SMTP_PORT=<your_bravo_smtp_port> \n     BRAVO_SMTP_USER=<your_bravo_smtp_user> \n     BRAVO_SMTP_PASS=<your_bravo_smtp_password> \n     EMAIL_USER=<your_email_address> \n     EMAIL_OWNER=<owner_email_address> \n     HASHNODE_USERNAME=<your_hashnode_username> \n     HASHNODE_HOST=<your_hashnode_host> \n     PORT=<optional_port_number> \n     ``` \n\n4. Start the server: \n   ```bash \n   npm run dev \n   ``` \n   This will start the server on the specified port or default to port 3000. \n\n## Configuration \n### Environment Variables \n- `BRAVO_SMTP_HOST`: Hostname for Bravo SMTP. \n- `BRAVO_SMTP_PORT`: Port for Bravo SMTP. \n- `BRAVO_SMTP_USER`: User for Bravo SMTP authentication. \n- `BRAVO_SMTP_PASS`: Password for Bravo SMTP authentication. \n- `EMAIL_USER`: Sender's email address. \n- `EMAIL_OWNER`: Owner's email address for receiving contact form submissions. \n- `HASHNODE_USERNAME`: Hashnode username for fetching blog posts. \n- `HASHNODE_HOST`: Host for Hashnode API. \n- `PORT`: Optional port number for running the server (default is 3000). \n\n## Endpoints and API \n### `/api/contact` (POST) \n- **Description**: Endpoint for handling contact form submissions. \n- **Request Payload**: `{ name, email, subject, message }` \n- **Response**: Success (200 OK) or Error (500 Internal Server Error).\n- **Code**: \n```javascript \napp.post('/api/contact', async (req, res) => {\n  const { name, email, subject, message } = req.body;\n\n  const ownerMailOptions = {\n    from: process.env.EMAIL_USER,\n    to: process.env.EMAIL_OWNER,\n    subject: `New Message from ${name}`,\n    html: `\n    <h2>New Message Received</h2>\n    <p><strong>Name:</strong> ${name}</p>\n    <p><strong>Email:</strong> ${email}</p>\n    <p><strong>Subject:</strong> ${subject}</p>\n    <p><strong>Message:</strong></p>\n    <p>${message}</p>\n  `,\n  };\n\n  const userMailOptions = {\n    from: process.env.EMAIL_USER,\n    to: email,\n    subject: 'I’ve Got Your Message!',\n    html: `\n      <div style=\\\"font-family: Arial, sans-serif; color: #333;\\\">\n        <h2>Hi there!</h2\n        <p>Thanks for reaching out. I’ve received your message and will get back to you soon.</p>\n        <p style=\\\"font-size: smaller; color: #888;\\\">Please don’t reply to this message as it’s system generated.</p>\n        <p>Have a great day!</p>\n      </div>\\n    `,\n  };\n\n  try {\n    await sendEmails(ownerMailOptions, userMailOptions);\n    res.status(200).send('Emails sent successfully');\n  } catch (error) {\n    res.status(500).send('Error sending email');\n  }\n});\n``` \n\n### `/api/blogs` (GET) \n- **Description**: Endpoint to fetch blog posts from Hashnode. \n- **Query Parameters**: `limit` (optional) \n- **Response**: Array of blog posts with fields like `title`, `brief`, `slug`, `coverImage`.\n- **Code**: \n```javascript \napp.get('/api/blogs/', async (req, res) => {\n const { limit } = req.query;\n const query = \n query {\n user(username: \"${process.env.HASHNODE_USERNAME}\") {\n publications(first: ${limit || 50}) {\n edges {\n node {\n posts(first: ${limit || 50}) {\n edges {\n node {\n title\n brief\n slug\n coverImage {\n url\n }\n }\n }\n }\n }\n }\n }\n }\n }\n ;\n\n try {\n const response = await axios.post('https://gql.hashnode.com/', { query }, {\n headers: {\n 'Content-Type': 'application/json'\n }\n });\n\n const posts = response.data.data.user.publications.edges.map(edge => edge.node.posts.edges.map(postEdge => postEdge.node));\n res.json(posts.flat());\n } catch (error) {\n console.error('Error fetching blogs:', error);\n res.status(500).json({ error: 'Error fetching blogs' });\n }\n});\n``` \n\n### `/api/blogs/:slug` (GET) \n- **Description**: Endpoint to fetch a single blog post from Hashnode based on slug. \n- **Path Parameter**: `slug` (unique identifier for the blog post) \n- **Response**: Object containing blog post details including `title`, `content`, `coverImage`.\n- **Code**: \n```javascript \nconst host = process.env.HASHNODE_HOST;\napp.get('/api/blogs/', async (req, res) => {\n const { slug } = req.params;\n const query = \n query SinglePublicationPost($host: String, $slug: String!) {\n publication(host: $host) {\n post(slug: $slug) {\n title\n content {\n markdown\n }\n coverImage {\n url\n }\n }\n }\n }\n ;\n\n try {\n const response = await axios.post('https://gql.hashnode.com/', {\n query,\n variables: { host, slug }\n }, {\n headers: {\n 'Content-Type': 'application/json'\n }\n });\n\n const postData = response.data.data.publication.post;\n res.json(postData);\n } catch (error) {\n console.error('Error fetching post:', error);\n res.status(500).json({ error: 'Error fetching post' });\n }\n});\n```  \n\n### `/api/projects` (GET) \n- **Description**: Endpoint to fetch all projects stored in `projects.json`. \n- **Response**: Array of project objects with fields like `id`, `slug`, `name`, `images`, `video`, `description`, `category`, `sourceCode`, `livePreview`. \n- **Code**: \n```javascript \napp.get('/api/projects', (req, res) => {\n fs.readFile(projectsFilePath, (err, data) => {\n if (err) {\n return res.status(500).json({ error: 'Failed to read projects file' });\n }\n const projects = JSON.parse(data);\n res.json(projects);\n });\n});\n``` \n\n\n\n ### `/api/projects/:id` (GET) \n- **Description**: Endpoint to fetch a specific project by ID from `projects.json`. \n- **Path Parameter**: `id` (unique identifier for the project) \n- **Response**: Object containing project details including `id`, `slug`, `name`, `images`, `video`, `description`, `category`, `sourceCode`, `livePreview`. \n- **Code**: \n```javascript \napp.get('/api/projects/', (req, res) => {\n const projectId = parseInt(req.params.id, 10);\n fs.readFile(projectsFilePath, (err, data) => {\n if (err) {\n return res.status(500).json({ error: 'Failed to read projects file' });\n }\n const projects = JSON.parse(data);\n const project = projects.find(p => p.id === projectId);\n if (project) {\n res.json(project);\n } else {\n res.status(404).json({ error: 'Project not found' });\n }\n });\n});\n``` \n\n## Frontend Components \n### `About` Component \n- **Description**: Provides information about the owner of the portfolio. \n- **Features**: Displays details such as background, interests, and contact information. \n\n### `AllBlogs` Component \n- **Description**: Displays a list of all blog posts fetched from Hashnode. \n- **Features**: Shows blog title, brief, cover image, and links to the full post. \n\n### `BlogPost` Component \n- **Description**: Displays the content of a single blog post fetched from Hashnode. \n- **Features**: Renders the full blog post including title, content, and cover image. \n\n### `Hero` Component \n- **Description**: The main landing section of the portfolio website. \n- **Features**: Displays a welcome message, a brief introduction, and navigation links. \n\n### `Portfolio` Component \n- **Description**: Displays a collection of projects. \n- **Features**: Shows project details such as name, images, description, category, source code link, and live preview link. \n\n### `Skills` Component \n- **Description**: Displays categorized skills including frontend, backend, databases, frameworks, programming languages, version control, and tools. \n- **Features**: Utilizes IntersectionObserver for animation on scroll and displays skill categories dynamically. \n\n### `ContactForm` Component \n- **Description**: Renders a form for users to send messages to the owner. \n- **Features**: Validates form inputs (name, email, subject, message) before submission and sends notifications to both owner and user upon successful submission. \n\n### `Resume` Component \n- **Description**: Displays resume information including skills, education, projects, and contact details. \n- **State**: `showResume` (boolean) - controls visibility of detailed resume sections. \n- **Methods**: `handleSeeMore`, `handleDownloadResume` - functions for toggling resume sections and downloading resume PDF. \n\n## Dependencies \n### Backend Dependencies \n- `@google-cloud/local-auth`: ^2.1.0 \n- `axios`: ^1.7.2 \n- `body-parser`: ^1.20.2 \n- `cors`: ^2.8.5 \n- `dotenv`: ^16.4.5 \n- `express`: ^4.19.2 \n- `nodemailer`: ^6.9.13 \n- `nodemon`: ^3.1.3 \n- `path`: ^0.12.7 \n- `url`: ^0.11.3 \n\n### Frontend Dependencies \n- `aos`: ^2.3.4 \n- `axios`: ^1.7.2 \n- `nodemon`: ^3.1.3 \n- `react`: ^18.3.1 \n- `react-copy-to-clipboard`: ^5.1.0 \n- `react-dom`: ^18.3.1 \n- `react-markdown`: ^9.0.1 \n- `react-router-dom`: ^6.23.1 \n- `react-syntax-highlighter`: ^15.5.0 \n- `react-toastify`: ^10.0.5 \n- `rehype-raw`: ^7.0.0 \n- `remark-gfm`: ^4.0.0 \n- `vite`: ^5.3.1 \n- `yet-another-react-lightbox`: ^3.20.0 \n\n### Frontend Dev Dependencies \n- `@types/react`: ^18.2.66 \n- `@types/react-dom`: ^18.2.22 \n- `@vitejs/plugin-react`: ^4.3.1 \n- `concurrently`: ^8.2.2 \n- `eslint`: ^8.57.0 \n- `eslint-plugin-react`: ^7.34.1 \n- `eslint-plugin-react-hooks`: ^4.6.0 \n- `eslint-plugin-react-refresh`: ^0.4.6 \n- `vite`: ^5.2.0 \n\n## Usage \n### Sending Emails \nExample code snippet for sending emails using Bravo SMTP: \n```javascript \n// Set up email options \nconst ownerMailOptions = { \nfrom: process.env.EMAIL_USER, \nto: process.env.EMAIL_OWNER, \nsubject: `New Message from ${name}`, \nhtml: `<p>New message from ${name} (${email}):</p><p>${message}</p>` \n}; \nconst userMailOptions = { \nfrom: process.env.EMAIL_USER, \nto: email, \nsubject: 'Message Received!', \nhtml: `<p>Hi ${name},<br/>Your message has been received. We will get back to you soon.</p>` \n}; \n// Send emails \nawait sendEmails(ownerMailOptions, userMailOptions); \n``` \n\n### Fetching Blogs \nExample code snippet for fetching blog posts from Hashnode API: \n```javascript \nconst response = await axios.get(`/api/blogs?limit=${limit}`); \nconst blogs = response.data; \n``` \n\n### Fetching Projects \nExample code snippet for fetching projects from `projects.json`: \n```javascript \nconst response = await axios.get('/api/projects'); \nconst projects = response.data; \n``` \n\n## Problems Faced During Production\n### SMTP Integration with Bravo\n- **Issue**: Initial integration with Bravo SMTP faced authentication errors.\n- **Solution**: Correctly configured the SMTP credentials in the `.env` file and ensured the `nodemailer` transport settings matched the Bravo SMTP requirements.\n### Hashnode API Rate Limits\n- **Issue**: Fetching a large number of blog posts in a single request sometimes hit the API rate limit.\n- **Solution**: Implemented pagination and limited the number of blog posts fetched per request.\n### Deployment Issues\n- **Issue**: Deployment to the hosting platform occasionally failed due to environment variable misconfigurations.\n- **Solution**: Ensured all required environment variables were correctly set in the hosting platform's configuration.\n### CORS Errors\n- **Issue**: Cross-Origin Resource Sharing (CORS) errors when the frontend tried to access the backend API.\n- **Solution**: Configured the `cors` middleware in the Express backend to allow requests from the frontend domain.\n### React Router URL Issues\n- **Issue**: When using React Router for client-side routing in your single page application (SPA), you may run into the issue of URL routes not working when a page is refreshed, the URL is written manually, or when the URL is shared. This issue may be due to your browser making a GET request to your server for a route that is not handled on your server. You have client-side routing set up, but you don’t have server-side routing set up.\n- **Solution**: Added the following routes in your server configuration to handle server-side routing:\n```json \n{ \n \"routes\": [ \n{ \"src\": \"/api/(.*)\", \"dest\": \"/backend/server.js\" }, \n { \"src\": \"/blog/(.*)\", \"dest\": \"/index.html\" }, \n { \"src\": \"/project/(.*)\", \"dest\": \"/index.html\" }, \n { \"src\": \"/allblogs\", \"dest\": \"/index.html\" }, \n { \"src\": \"/(.*)\", \"dest\": \"/dist/index.html\" } \n] \n} \n```\n## Deployment\n### Vercel and CI/CD Pipeline\n- **Description**: The project is deployed on Vercel with a CI/CD pipeline. Any changes pushed to the Git repository trigger a new deployment on Vercel, ensuring the site is always up-to-date with the latest changes.\n- **Steps**: Configure the Vercel project with the GitHub repository, set up environment variables in Vercel, and ensure the `vercel.json` configuration file includes necessary routes and settings.\n\n## Acknowledgements \nSpecial thanks to all the contributors and the open-source community for their invaluable support and resources.",

    "category": "mini",
    "sourceCode": "https://github.com/Bhaveshj008/BhaveshJadhavPortfolio/",
    "livePreview": "https://bhavesh-jadhav-portfolio.vercel.app/"
    },
    {
      "id": 2,
      "name": "Agro Mall",
      "type": "filter-mega",
      "images": ["agromall/img(0).png","agromall/img(1).png","agromall/img(2).png","agromall/img(3).png","agromall/img(4).png","agromall/img(5).png","agromall/img(6).png","agromall/img(7).png","agromall/img(8).png","agromall/img(9).png","agromall/img(10).png","agromall/img(11).png","agromall/img(12).png","agromall/img(13).png","agromall/img(14).png","agromall/img(15).png","agromall/img(16).png","agromall/img(17).png","agromall/img(18).png","agromall/img(19).png","agromall/img(20).png","agromall/img(21).png"],
      "video": "https://www.youtube.com/embed/b-GkaLi5IaM?si=tKH3bmalzb7NCjm2",
      "description": "# Agro Mall 2.0\n## Overview\nAhire Agro Mall 2.0 is an advanced e-commerce platform tailored specifically for agricultural products. This repository encompasses the backend functionalities developed in PHP, along with the frontend components built using HTML, CSS, JavaScript, jQuery, Ajax, and Bootstrap. The platform features a sophisticated admin panel with extensive analytics capabilities, order management, expense tracking, billing software, offer management, user and role management, about us section management, category and product management, and a comprehensive delivery updates system with OTP-based security.\n## Features\n1. **Admin Panel**:\n   - **Sales and Expense Analysis**: Provides detailed insights into sales performance and expenditure.\n   - **Order Management**: Advanced order tracking with filters for date ranges and order statuses.\n   - **Expense Manager**: Tracks expenses and manages financial transactions efficiently.\n   - **Make an Order**: Billing software for offline customers with seamless integration.\n   - **Offer Management**: Manages and displays offers directly on the client side.\n   - **User and Role Management**: Manages users and their roles securely.\n   - **About Us Management**: Controls overall website content such as gallery images and owner information.\n   - **Categories and Products Management**: Manages product categories and individual products effectively.\n   - **Delivery Updates**: Tracks daily deliveries and collection amounts by delivery personnel, secured with OTP-based authentication.\n2. **Delivery Panel**:\n   - **Secure OTP-based Delivery System**: Generates random OTPs for secure delivery authentication known only to the customer.\n   - **Daily Delivery Updates**: Displays daily delivered items and collection amounts for each delivery personnel.\n3. **Client Side Panel**:\n   - **Product Purchasing**: Users can browse and purchase products seamlessly.\n   - **Online Payment Gateway**: Integration with Razorpay for secure online payments.\n   - **Cash on Delivery**: Option for users to pay upon delivery.\n   - **Add to Cart Functionality**: Users can add products to their cart for later purchase.\n   - **Instant Bill Generation**: Generates bills instantly after purchase.\n   - **User Authentication**: Features login, signup, and password reset functionality with OTP-based security.\n## Technologies Used\n- **Backend**: PHP\n- **Frontend**: HTML, CSS, JavaScript, jQuery, Bootstrap\n- **Authentication**: OTP-based authentication for delivery system\n- **Database**: MySQL\n- **Ajax**: Asynchronous JavaScript and XML for dynamic interactions\n- **jQuery and Ajax**: Enables seamless and responsive web interactions\n- **Bootstrap**: Frontend framework for responsive design and UI components\n## Disclaimer\nAhire Agro Mall 2.0 is a fictional project created for demonstration purposes. Any resemblance to real businesses or organizations is purely coincidental.",
    "category": "mega",
    "sourceCode": "https://github.com/Bhaveshj008/Agro_Mall_2.0",
    "livePreview": "https://agromall.000webhostapp.com/"
    },
    {
      "id": 3,
      "name": "Weather and Notepad app",
      "type": "filter-mini",
      "images": ["whetherapp/image1.jpg"],
      "video": "https://www.youtube.com/embed/IrTyGlXLYqg?si=DVD7AkbMk0V526_h",
      "description": "# Weather Notepad App\nThe Weather Notepad App is a simple web application that provides weather information and a notepad feature. It allows users to view average temperature, rainfall, and humidity for the week, as well as the current temperature. Additionally, users can add and delete notes using the notepad feature.\n## Features\n- Display average temperature of the week\n- Display average rainfall of the week\n- Display average humidity of the week\n- Display current temperature\n- Display a bar chart of the average temperature of the previous week\n- Notepad functionality to add and delete notes\n## Technologies Used\n- React.js\n- Axios for HTTP requests\n- Material-UI for UI components\n- Recharts for data visualization\n## How to Use\n1. Clone the repository to your local machine.\n2. Navigate to the project directory.\n3. Install dependencies using `npm install`.\n4. Obtain a Weather API key (e.g., from Weatherbit) and replace the placeholder API key in `App.js` with your actual API key.\n5. Run the application using `npm start`.\n6. Access the application in your web browser at `http://localhost:3000`.",
      "category": "mini",
      "sourceCode": "https://github.com/Bhaveshj008/weather-notepad-app",
      "livePreview": "https://weather-notepad-app.vercel.app/"
    }
    
  ]
  